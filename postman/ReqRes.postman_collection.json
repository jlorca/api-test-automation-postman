{
	"info": {
		"_postman_id": "5d092f61-26ba-4f42-bfc1-d6ce11e33fd2",
		"name": "ReqRes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "49557614",
		"_collection_link": "https://jeslorlu-3734009.postman.co/workspace/Jesus's-Workspace~f586e3c5-d5bf-4bb6-8e83-740272353edb/collection/49557614-5d092f61-26ba-4f42-bfc1-d6ce11e33fd2?action=share&source=collection_link&creator=49557614"
	},
	"item": [
		{
			"name": "List of Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Check that the response status code is 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2. Verify that the response body contains a 'data' array",
							"pm.test(\"Response has a 'data' array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data').that.is.an('array');",
							"});",
							"",
							"// 3. Ensure each user object in 'data' has required fields",
							"pm.test(\"Each user in 'data' has id, email, first_name, last_name, and avatar\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.be.an('array');",
							"    jsonData.data.forEach(function (user) {",
							"        pm.expect(user).to.have.property('id');",
							"        pm.expect(user).to.have.property('email');",
							"        pm.expect(user).to.have.property('first_name');",
							"        pm.expect(user).to.have.property('last_name');",
							"        pm.expect(user).to.have.property('avatar');",
							"    });",
							"});",
							"",
							"// 4. Check that the 'total' field is a number >= data.length",
							"pm.test(\"'total' field is a number >= data.length\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('total').that.is.a('number');",
							"    pm.expect(jsonData.total).to.be.at.least(jsonData.data.length);",
							"});",
							"",
							"// 5. Verify that the 'support' object contains both 'url' and 'text' fields",
							"pm.test(\"'support' object contains 'url' and 'text'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('support').that.is.an('object');",
							"    pm.expect(jsonData.support).to.have.property('url');",
							"    pm.expect(jsonData.support).to.have.property('text');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{apiKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		}
	]
}